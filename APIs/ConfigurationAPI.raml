#%RAML 1.0

# AMWA NMOS Device Connection Management Specification: Connection API
# (c) AMWA 2024

title: Configuration
baseUri: http://api.example.com/x-nmos/configuration/{version}
version: v1.0
mediaType: application/json

documentation:
  - title: 'Overview'
    content: |
      The Configuration API is exposed by each NMOS Device in a system that supports the AMWA NMOS Device Configuration Specification. The API is used to access the NMOS Device's Device Model which is defined according to the [AMWA NMOS Control Architecture](https://specs.amwa.tv/ms-05-01/) and [AMWA NMOS Control Framework](https://specs.amwa.tv/ms-05-02/).
  - title: 'Further Documentation'
    content: |
      Further normative documentation covering the behaviour of this API is contained in the [docs](../docs) folder of this repository.
/:
  displayName: 'Base'
  get:
    description: 'List of paths available from this API'
    responses:
      200:
        body:
          example: !include ../examples/base-get-200.json
          type: !include schemas/base.json
/rolePaths:
  displayName: 'Role Paths'
  get:
    description: 'Returns the Role Paths of the Device Model. Each rolePath MUST be created by appending NcObject roles starting with the root block and using "." as the delimiter'
    responses:
      200:
        body:
          example: !include ../examples/rolePaths-base-get-200.json
          type: !include schemas/rolePaths-base.json
  /{rolePath}:
    uriParameters:
        rolePath:
            type: string
    get:
      description: 'Get attributes of the object specified by rolePath'
      responses:
        200:
          body:
            example: !include ../examples/rolePath-get-200.json
            type: !include schemas/rolePath.json
        404:
          description: 'Returned when the requested Role Path does not exist. Corresponds to NcMethodStatus code 404.'
          body:
            type: !include schemas/ms05-error.json
    /bulkProperties:
      displayName: 'Bulk Properties'
      get:
        description: 'Get Bulk Properties of the object, returned as a NcMethodResultBulkValuesHolder object.'
        queryParameters:
          recurse:
            description: 'True will get Bulk Properties for this object and all child objects'
            type: boolean
        responses:
          200:
            body:
              type: !include schemas/bulkProperties-get-response.json
              example: !include ../examples/bulkProperties-get-200.json
      options:
        description: A pre-flight check generally used for Cross-Origin Resource Sharing (CORS) purposes
        responses:
          200:
          403:
      patch:
        description: 'Validate an NcBulkValuesHolder object against the Device Model'
        body:
          type: !include schemas/bulkProperties-validate-request.json
          example: !include ../examples/bulkProperties-validate-request.json
        responses:
          200:
            body:
              type: !include schemas/bulkProperties-validate-response.json
              example: !include ../examples/bulkProperties-validate-200.json
      put:
        description: 'Set a Bulk Properties object on the Device Model'
        body:
          type: !include schemas/bulkProperties-set-request.json
          example: !include ../examples/bulkProperties-set-request.json
        responses:
          200:
            body:
              type: !include schemas/bulkProperties-set-response.json
              example: !include ../examples/bulkProperties-set-200.json
    /descriptor:
      displayName: 'Class Descriptor'
      get:
        description: 'Get MS-05 Class Descriptor of this object. This descriptor MUST include all inherited elements'
        responses:
          200:
            body:
              example: !include ../examples/class-descriptor-get-200.json
              type: !include schemas/descriptor-get.json
          500:
            description: 'Returned when the Class Descriptor of this object was unable to be retrieved. Corresponds to NcMethodStatus code 500.'
            body:
              type: !include schemas/ms05-error.json
    /methods:
      displayName: 'Methods'
      get:
        description: 'Get Methods of this object. This response MUST include all object methods including all the inherited methods'
        responses:
          200:
            body:
              example: !include ../examples/methods-base-get-200.json
              type: !include schemas/methods-base.json
      /{methodId}:
        uriParameters:
            methodId:
                type: string
                pattern: "^[0-9]+m[0-9]+"
        options:
          description: A pre-flight check generally used for Cross-Origin Resource Sharing (CORS) purposes
          responses:
            200:
            403:
        patch:
          description: 'Invoke method.'
          body:
            example: !include ../examples/method-patch-request.json
            type: !include schemas/method-patch-request.json
          responses:
            200:
              body:
                example: !include ../examples/method-patch-200.json
                type: !include schemas/method-patch-response.json
            400:
              description: 'Returned when the method arguments are invalid. Corresponds to NcMethodStatus code 417.'
              body:
                type: !include schemas/ms05-error.json
            404:
              description: 'Returned when the requested Method does not exist. Corresponds to NcMethodStatus code 501.'
              body:
                type: !include schemas/ms05-error.json
            500:
              description: 'Returned when the Method was unable to be invoked. Corresponds to NcMethodStatus code 500.'
              body:
                type: !include schemas/ms05-error.json
    /properties:
      displayName: 'Properties'
      get:
        description: 'Get Properties of the object. This response MUST include all object properties including all the inherited properties'
        responses:
          200:
            body:
              example: !include ../examples/properties-base-get-200.json
              type: !include schemas/properties-base.json
      /{propertyId}:
        uriParameters:
            propertyId:
                type: string
                pattern: "^[0-9]+p[0-9]+"
        get:
          description: 'Get attributes of a Property'
          responses:
            200:
              body:
                example: !include ../examples/property-get-200.json
                type: !include schemas/property.json
            404:
              description: 'Returned when the requested Property does not exist. Corresponds to NcMethodStatus code 502.'
              body:
                type: !include schemas/ms05-error.json
        /descriptor:
          displayName: 'Datatype Descriptor of property'
          get:
            description: 'Get MS-05 Datatype Descriptor of property. This descriptor MUST include all inherited elements'
            responses:
              200:
                body:
                  example: !include ../examples/property-descriptor-get-200.json
                  type: !include schemas/property-descriptor.json
              500:
                description: 'Returned when the Datatype Descriptor of this object was unable to be retrieved. Corresponds to NcMethodStatus code 500.'
                body:
                  type: !include schemas/ms05-error.json
        /value:
          displayName: 'Value of a Property'
          get:
            description: 'Get value of a Property'
            responses:
              200:
                body:
                  example: !include ../examples/property-value-get-200.json
                  type: !include schemas/property-value-get.json
              500:
                description: 'Returned when the Property was unable to be retrieved. Corresponds to NcMethodStatus code 500.'
                body:
                  type: !include schemas/ms05-error.json
          options:
            description: A pre-flight check generally used for Cross-Origin Resource Sharing (CORS) purposes
            responses:
              200:
              403:
          put:
            descriptions: 'Put value of a Property'
            body:
              example: !include ../examples/property-value-put-request.json
              type: !include schemas/property-value-put-request.json
            responses:
              200:
                body:
                  example: !include ../examples/property-value-put-200.json
                  type: !include schemas/property-value-put-response.json
              500:
                description: 'Returned when the Property was unable to be set. Corresponds to the following NcMethodStatus codes: 405 if Property is read only, 417 if the value being PUT is invalid, 500 for all other reasons.'
                body:
                  type: !include schemas/ms05-error.json
